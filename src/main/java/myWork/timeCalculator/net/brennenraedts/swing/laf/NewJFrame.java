/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package myWork.timeCalculator.net.brennenraedts.swing.laf;

import myWork.timeCalculator.net.brennenraedts.graphics.shapes.Gear;
import myWork.timeCalculator.net.brennenraedts.graphics.shapes.Star;

import javax.swing.*;
import java.awt.*;
import java.awt.font.GlyphVector;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;


/**
 * @author Benjamin Brennenraedts
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Nimbus");
        jButton1.setPreferredSize(new java.awt.Dimension(73, 73));

        jButton2.setText("Round buttons");

        jButton3.setText("Some text");
        jButton3.setName("targetName"); // NOI18N

        jButton5.setEnabled(false);

        jButton6.setForeground(new java.awt.Color(0, 0, 204));

        jButton7.setForeground(new java.awt.Color(255, 0, 0));

        jButton8.setForeground(new java.awt.Color(255, 153, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(19, 19, 19)
                                                .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    applyToAllButtons();
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            NewJFrame frame = new NewJFrame();
            applyToComponent(frame.jButton3);
            Shape gear = new Gear(new Point2D.Double(0, 0), 20, 0.8, 15, 0.6, 0.4, 0);
            applyToComponent(frame.jButton4, gear, 0.7);
            applyToComponent(frame.jButton5, new Star(new Point2D.Double(0, 0), 20, 0.3, 5, -90), 0.5);
            Path2D pathArrow = new Path2D.Double();
            pathArrow.moveTo(0, 5);
            pathArrow.lineTo(10, 5);
            pathArrow.lineTo(10, 0);
            pathArrow.lineTo(20, 10);
            pathArrow.lineTo(10, 20);
            pathArrow.lineTo(10, 15);
            pathArrow.lineTo(0, 15);
            pathArrow.closePath();
            applyToComponent(frame.jButton6, pathArrow, 0.5);
            applyToComponent(frame.jButton7, pathArrow, 0.5);
            applyToComponent(frame.jButton8, frame.convert("?"), 0.8);
            frame.setVisible(true);
        });
    }

    public Shape convert(String s) {
        Font font = getFont();
        GlyphVector v = font.createGlyphVector(getFontMetrics(font).getFontRenderContext(), s);
        return v.getOutline();
    }

    private static void applyToComponent(JComponent c) {
        UIDefaults overrides = new UIDefaults();
        apply(overrides);
        c.putClientProperty("Nimbus.Overrides", overrides);
        c.putClientProperty("Nimbus.Overrides.InheritDefaults", false);
    }

    private static void applyToComponent(JComponent c, Shape s, double shapeSpaceRatio) {
        UIDefaults overrides = new UIDefaults();
        apply(overrides, s, shapeSpaceRatio);
        c.putClientProperty("Nimbus.Overrides", overrides);
        c.putClientProperty("Nimbus.Overrides.InheritDefaults", false);
    }


    private static void applyToAllButtons() {
        apply(UIManager.getLookAndFeel().getDefaults());
    }

    private static void apply(UIDefaults uidef) {
        uidef.put("Button[Default].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_DEFAULT));
        uidef.put("Button[Default+Focused].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_DEFAULT_FOCUSED));
        uidef.put("Button[Default+MouseOver].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_MOUSEOVER_DEFAULT));
        uidef.put("Button[Default+Focused+MouseOver].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_MOUSEOVER_DEFAULT_FOCUSED));
        uidef.put("Button[Default+Pressed].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_PRESSED_DEFAULT));
        uidef.put("Button[Default+Focused+Pressed].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_PRESSED_DEFAULT_FOCUSED));
        uidef.put("Button[Disabled].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_DISABLED));
        uidef.put("Button[Enabled].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_ENABLED));
        uidef.put("Button[Focused].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_FOCUSED));
        uidef.put("Button[MouseOver].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_MOUSEOVER));
        uidef.put("Button[Focused+MouseOver].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_MOUSEOVER_FOCUSED));
        uidef.put("Button[Pressed].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_PRESSED));
        uidef.put("Button[Focused+Pressed].backgroundPainter", new RoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_PRESSED_FOCUSED));
    }

    private static void apply(UIDefaults uidef, Shape s, double shapeSpaceRatio) {
        uidef.put("Button[Default].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_DEFAULT, s, true, shapeSpaceRatio));
        uidef.put("Button[Default+Focused].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_DEFAULT_FOCUSED, s, true, shapeSpaceRatio));
        uidef.put("Button[Default+MouseOver].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_MOUSEOVER_DEFAULT, s, true, shapeSpaceRatio));
        uidef.put("Button[Default+Focused+MouseOver].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_MOUSEOVER_DEFAULT_FOCUSED, s, true, shapeSpaceRatio));
        uidef.put("Button[Default+Pressed].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_PRESSED_DEFAULT, s, true, shapeSpaceRatio));
        uidef.put("Button[Default+Focused+Pressed].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_PRESSED_DEFAULT_FOCUSED, s, true, shapeSpaceRatio));
        uidef.put("Button[Disabled].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_DISABLED, s, true, shapeSpaceRatio));
        uidef.put("Button[Enabled].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_ENABLED, s, true, shapeSpaceRatio));
        uidef.put("Button[Focused].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_FOCUSED, s, true, shapeSpaceRatio));
        uidef.put("Button[MouseOver].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_MOUSEOVER, s, true, shapeSpaceRatio));
        uidef.put("Button[Focused+MouseOver].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_MOUSEOVER_FOCUSED, s, true, shapeSpaceRatio));
        uidef.put("Button[Pressed].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_PRESSED, s, true, shapeSpaceRatio));
        uidef.put("Button[Focused+Pressed].backgroundPainter", new ShapeRoundedCornerButtonPainter(RoundedCornerButtonPainter.BACKGROUND_PRESSED_FOCUSED, s, true, shapeSpaceRatio));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    public javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    // End of variables declaration//GEN-END:variables
}
